****File are sorted alphabetically, functions are sorted in order of appearance***

_____________________________________

CompositeActionListenerWithPriorities.java
    actionPerformed
        Purpose: to execute actions when asked

        Parameters: ActionEvent

        Returns: void

    addClassActionListener
        Purpose: to add an action listener for other classes

        Parameters: ActionListener a,
            -"priority" this action needs to be executed (int),
            -"keyCause" which is what executed the action next button, back button etc. (String),
            -"button"  necessary in case the selection is for radio buttons
            -"listenerSource" which is from which class its being called. Compared to key cause to make sure they match.
                Done this way because the built-in way action listeners work can have conflicts due to being multi-threaded.

        Returns: void

    DEBUGLISTENERSIZE
        Purpose: For debugging WOULD NOT BE KEPT IN FINAL PRODUCT, AS IT COULD CREATE VULNERABILITIES

    reset
        Purpose: to reset variables, after all actions have been performed

        Parameters: nothing

        Returns: void

    setCurrentClass
        Purpose: To tell action priorities what the current class should be

        Parameters: thisClass (what to change class to)

        Returns: void

    getCurrentClass
        Purpose: To get what the current class is

        Parameters: nothing

        Returns: void

    DEBUGLISTENERMAP
        Purpose: For debugging WOULD NOT BE KEPT IN FINAL PRODUCT, AS IT COULD CREATE VULNERABILITIES

    TESTFORCECURRENTCLASS
        Purpose: For debugging WOULD NOT BE KEPT IN FINAL PRODUCT, AS IT COULD CREATE VULNERABILITIES

    TESTRESETACTIONPRIORITIES
        Purpose: For debugging WOULD NOT BE KEPT IN FINAL PRODUCT, AS IT COULD CREATE VULNERABILITIES

_____________________________________

CreateButton.java

    backButtonCreate
        Purpose: To create a back button that can be used by the GUI

        Parameters: nothing

        Returns: JButton (the back button)

    saveButtonCreate
        Purpose: To create a save button that can be used by the GUI

        Parameters: nothing

        Returns: JButton (the save button)

    nextButtonCreate
        Purpose: To create a next button that can be used by the GUI

        Parameters: nothing

        Returns: JButton (the next button)

    makeBackNextButtonsPanel

        Purpose: to use the buttons to make a panel

        Parameters: buttons and panel with save button

        Returns: JPanel (the backNextButtonsPanel)

    setTextFieldPanel
        -set variable from other classes

    addDocumentListenerForSaving

        Purpose: to add a doccument listener for a textfield, which
        can enable the save button and change the textField empty state based on doccument
        updates.

        Parameters: textfield

        Returns: void

    saveButtonEnable

        Purpose: for other files to be enable enable save button

        Parameters: nothing

        Returns: void

    removeFromWindow

        Purpose: since the buttons and button panel are from this class,
        this class can remove them. Removes buttons and panel from window.

        Parameters: nothing

        Returns: void


_____________________________________
Creator.java

    createTextBox
        Purpose: To make textboxes for student classes

        Parameters: placeholder (default text), thisType (type of whats created),
        boxLoaded (if the box being created is loaded, necessary for placeholder purposes)

        Returns: JTextField created

    checkIfLoadedAndAction
        Purpose: Sets whether textfield is loaded, and emptied

        Parameters: none

        Returns: void

    setTextFieldContainer, getTextFieldContainer
        Function to set and retreive textFieldpanel

    deleteTextBox
        Purpose: To delete a textbox

        Parameters: JPanel container (with textbox that user wants to delete)

        Returns: void

    windowFix
        Purpose: To update GUI components

        Parameters: nothing

        Returns: void

    hideContainer
        Purpose: To hide containers based in creator class

        Parameters: nothing

        Returns: void

    removeContainer
        Purpose: To remove containers based in creator class

        Parameters: nothing

        Returns: void

    typeBox
        Purpose: To create components for StudentStatCollect class (different because of
        different nesting. Which I should not have done, but it did help me be exposed to different
        issues, and their respective solutions)

        Parameters: placeholder (default text), thisType (type of whats created),
        boxLoaded (if the box being created is loaded, necessary for placeholder purposes)

        Returns: JPanel

_____________________________________
Decorator.java

    InstructionsPanelDecorate
        Purpose: to stylize the instructions panel

        Parameters: the JPanel instructionsPanel, and JLabel instructionsWords to 
        be displayed

        Returns: a properly styled JPanel instructionsPanel

    choiceGbc
        Purpose: gives proper constraints for the radio buttons

        Parameters: nothing

        Returns: GridBagConstraints gbc, which has the constraints attached

    areYouSureMessage
        Purpose: "are you sure..." popup base

        Parameters: importedTextField, String myReason for what the message is for, String text of popup, and with/height of
        window

        Returns: String for if user responded yes or no.

    yesButtonActionListener
        Purpose: adds action listener to "yes" button for areYouSureMessage

        Parameters: the JButton yesButton

        Returns: void

    yesButtonAction
        Purpose: based on reason for pop up given, directs application to proper
        logic

        Parameters: nothing

        Returns: void

    reasonIsDeletingActionYes
        Purpose: logic for if user hit "yes" to deleing class popup

        Parameters: nothing

        Returns: void

    reasonIsChangingUsernameYes
        Purpose: logic for if user hit "yes" for editing their username popup

        Parameters: nothing

        Returns: void

    reasonIsStudentStatsEmptyYes
        Purpose: logic for if user hit "yes" for removing placeholders popup

        Parameters: nothing

        Returns: void

    deleteFocusListeners
        Purpose: delete requested amount of focus listeners

        Parameters: int amount that the application wants to delete

        Returns: void

    noButtonActionListener
        Purpose: action for if user selects "no" to areYouSureMessagePopup

        Parameters: JButton noButton

        Returns: void

    noButtonAction
        Purpose: action for if user hits no button in "areYouSureMessage" popup

        Parameters: nothing

        Returns: void

    setCaretPositionToZero
        Purpose: to set caret position to the start if the user clicks out of the box

        Parameters: nothing

        Returns: void

    genericPopUpMessage
        Purpose: generic popup message dialog with just an okay button

        Parameters: String text to be displayed, int width/height desired of popup

        Returns: finished JDialog popup

    pleaseChooseAnOptionWithRadioButtons
        Purpose: create a popup that says "please choose an option"

        Parameters: JRadioButton to center popup around

        Returns: void

    hideWindow
        Purpose: to hide uneeded components when going to other screens in GUI

        Parameters: JPanel instructionsPanel, JPanel choicesPanel, JPanel backNextButtonsPanel, which are
        all to be hidden. There is a more efficient way to do this with fewer parameters, and I did it that
        way in classes I wrote later. However, I was exposed to different solutions for the same problem.

        Returns: void

    decorateTextBox
        Purpose: give appropriate styling to a textbox

        Parameters: String placeholderText to be put in textbox

        Returns: JTexField that is properly styled

    areYouSureMessageListenerForEditingUsername
        Purpose: add a listener for when a user is trying to edit a username that
        has loaded content attached. This, way the application can give a popup
        at the appropriate time

        Parameters: nothing

        Returns: void

    maximumAmountReachedPopup
        Purpose: create popup for when a user tries to
        add more textboxes to the GUI, but it already
        has put the maximum amount of boxes

        Parameters: nothing

        Returns: void

    getFontFromTextFields
        Purpose: Delivers font of textfields. Necessary for determining when to
        truncate text displayed on the GUI (specifically when the username is
        displayed during the "Welcome [username]!" message)

        Parameters: nothing

        Returns: void

    removeForNewUserWindow
        Purpose: certain components that are added to the newUser class are stored here.
        I later realized how inefficient this is and kept those types of variables within
        the class. However, I was exposed to different ways of solving the same problem
        this way.

        Parameters: JPanel instructionsPanel, JPanel choicesPanel, JPanel backNextButtonsPanel
        to be removed

        Returns: void
_____________________________________

FileHandling.java

    readFileToList
        Purpose: Turn the contents of a text file into a list. Helpful for print grades.

        Parameters: String filePath (where the data is located)

        Returns: ArrayList<String> list

    fileExists
        Purpose: Checks if a file exists

        Parameters: String filePath

        Returns: Boolean based on whether the file path is valid

    folderExists
        Purpose: Checks if a folder is at a file path

        Parameters: String folderPath (the path to the folder)

        Returns: Boolean based on whether the path to the folder is valid

    fileIsNotEmpty
        Purpose: Checks if a file is not empty, useful for determining whether
        to add new boxes

        Parameters: String filePath

        Returns: Boolean based on whether the file is not empty

    loadtextboxes
        Purpose: loads information in file path into textboxes
        and puts textboxes on GUI

        Parameters: String filePath

        Returns: JPanel with the boxes

    writeArrayListToFile
        Purpose: Given an array list, write it to a file, such as after deleting
        lines due to them being placeholders, which dont get written to these files.

        Parameters: String filePath to desired file, and lines to write

        Returns: void

    deleteClass
        Purpose: Given a filepath, delete the file

        Parameters: String filePathString

        Returns: void

    deleteFromDeleteQueue
        Purpose: There is a deleting queue that is set in setUserInformation, this
        function executes the deletions

        Parameters: nothing

        Returns: void
_____________________________________

FileWriting.java

    writeFolderToFile
        Purpose: create a directory for a user's information. Only necessary if
        they are a new user

        Parameters: nothing

        Returns: void

    decideIfWrite
        Purpose: see if the given text can be written or not

        Parameters: Component component (to be written), and BufferedWriter writer

        Returns: void

    tryToWrite
        Purpose: check textbox text validity, if so, write text

        Parameters: BufferedWriter writer

        Returns: void

    writeTextToFile
        Purpose: make continuing possible where there are checks, and direct to
        appropriate writing function (tryToWriteWithoutAppend)

        Parameters: nothing

        Returns: void

    tryToWriteTextFieldWithoutAppend
        Purpose: student class and student stat files are nested differently.
        This function determines which function they need, whether they can write
        without append or need something different.

        Parameters: nothing

        Returns: void

    tryToWriteTextFieldWithoutAppend
        Purpose: writing for student classes

        Parameters: Component component (to be written), BufferedWriter writer

        Returns: void

    seeHowManyPlaceholdersToSkip
        Purpose: Check how many placeholders are in the Student Stat Collect screen.
        Determines which boxes to delete in the file

        Parameters: nothing

        Returns: void

    writeTextToFileWithAppend
        Purpose: writing to file funciton for student classes

        Parameters: JPanel panel to write with

        Returns: void

    removeUnwritablePlaceholders
        Purpose: functions the same as seeHowManyPlaceholdersToSkip, but will work
        regardless of the value of set.getCanContinue.

        Parameters: nothing

        Returns: void

    deleteLines
        Purpose: reset writing list and empty file

        Parameters: Stirng importedFilePath (where the function works)

        Returns: void

    getClassList
        Purpose: returns list of classes

        Parameters: nothing

        Returns: ArrayList<String>

    howManyPlaceholders
        Purpose: look textFieldPanel layout, and use that to determine where to start
        checking for placeholders, then call appropriate functions.

        Parameters: nothing

        Returns: void

    iteratePanelForHowManyPlaceholders
        Purpose: iterate through panels to get the exact amount of placeholders

        Parameters: labelOrNOtIndex (which index to start searching, so class label
        is not included)

        Returns: int placeholderAmount

    TESTFORCECLASSLISTADD, TESTFORCEFINALLIST
        THESE FUNCTIONS ARE FOR TESTING PURPOSES ONLY, AND WOULD NEED TO BE REMOVED
        IF THE PROJECT WAS TO EVER GO PUBLIC (FOR SECURITY REASONS).

_____________________________________

Gather.java

    gatherLaunch:
        Purpose: To allow for launching without making a new instance

        Parameters: nothing

        Returns: void

    makeUsernameBox:
        Purpose: decide what default text should be in the username box

        Parameters: nothing

        Returns: void

    textFieldMouseListener:
        Purpose: add a focus listener for pop ups and defocusing textboxes when
        clicking outside of it

        Parameters: nothing

        Returns: void

    instructionsWordsWindow:
        Purpose: deciding what text the instructions label should have

        Parameters: nothing

        Returns: void

    decorateInstructions:
        Purpose: take label and call styling functions

        Parameters: JLabel instructionsWordsLabel with needed text

        Returns: void

    inputName:
        Purpose: style username box

        Parameters: nothing

        Returns: void

    buttonSetUpAction:
        Purpose: call functions necessary to add
        back, save, and next buttons to window

        Parameters: nothing

        Returns: void

    makeBackAction:
        Purpose: add action listener to back button

        Parameters: nothing

        Returns: void

    backButtonAction:
        Purpose: actual action for when back button is clicked

        Parameters: nothing

        Returns: void

    makeNextButton:
        Purpose: create a next button

        Parameters: nothing

        Returns: void

    nextButtonAddActionListener
        Purpose: add action listener to next button

        Parameters: nothing

        Returns: void

    doNextButtonProcedure
        Purpose: run necessary actions when next button is clicked. Saves as necessary, and calls
        nextButtonAction

        Parameters: nothing

        Returns: void

    nextButtonAction
        Purpose: Actual logic for going to next screen in GUI

        Parameters: nothing

        Returns: void

    errorMessageSetUp
        Purpose: error message set up for if the user has not put in a username

        Parameters: String  labelWords with text for message, and width/height that is desired
        for the box

        Returns: void

    setUsername
        Purpose: sets the username in setUserInformation file

        Parameters: nothing

        Returns: void

    getWindowX
        Purpose: get X coordinates of window. Necessary for popups

        Parameters: nothing

        Returns: void

    getWindowY
        Purpose: get Y coordinates of window. Necessary for popups

        Parameters: nothing

        Returns: void

    showWindow
        Purpose: set window to visible

        Parameters: windowX (window coordinates), windowY (window coordinates)

        Returns: nothing

    hideWindow
        Purpose: hide unecessary components when going to other classes

        Parameters: nothing

        Returns: void

    removeFromWindow
        Purpose: remove unecessary components from window

        Parameters: nothing

        Returns: void

_____________________________________

GoIntoPanel.java

    goIntoPanel
        Purpose: digs into panel, and returns text from panel

        Parameters: panel, index (where to go into panel)

        Returns: the text within the panel is returned

    goIntoPanelReturnTextbox
        Purpose: return the textbox within the panel

        Parameters: panel, index (where to go into panel)

        Returns: JTextField, which is the textbox at the deepest part of the panel indexed

    checkIfHasPlaceholder
        Purpose: given a panel of textfields, will return a boolean telling whether
        its textboxes contain a placeholder. Can take a panel that has nested panels
        containing textfields.

        Parameters: textFieldPanel2 (not to be confused with textFieldPanel variable used
        in other classes)

        Returns: Boolean

    goIntoPanelReturnTypeOfFirstComponentInPanel
        Purpose: returns a String detailing whether a panel's first component is a
        JTextField, JLabel, or JPanel. Useful considering not all JTextFields and Jlabels etc are nested uniformly,
        and type information needed in order to not count special cases (like the JLabel) as placeholders

        Parameters: panel

        Returns: String detailing whether a panel's first component is a
        JTextField, JLabel, or JPanel.

_____________________________________
GradeTrackerTests.java

Contains various test functions. Some cannot be run without accounts with specific
loaded data, which I did not put in the repo. But, would be easy to replicate by looking
at the test case.
_____________________________________

Launcher.java

    main:
        Purpose: to run the initialize function.

        Parameters: String[] args

        Returns: void

    initialize:
        Purpose: to set up jframe window and run NewUser() instance

        Parameters: nothing

        Returns: void
_____________________________________

MainWindow.java

    MainWindowLaunch
        Purpose: allows user to launch window from other classes without making
        a new instance

        Parameters: nothing

        Returns: void

    windowSetUp
        Purpose: sets window title and size

        Parameters: nothing

        Returns: void

    InstructionsWordsWindow
        Purpose: creates and decorates a the instructions words panel

        Parameters: nothing

        Returns: void

    truncateLabelText
        Purpose: truncate if username is a certain length

        Parameters: prefix (words that come before username),
        suffix (words that come after username), and max width (the width of the
        window)

        Returns: void

    radioButtonSetUp
        Purpose: set up radio button options

        Parameters: nothing

        Returns: void

    choicesButtonDecorate
        Purpose: stylize the radio buttons

        Parameters: JRadioButton button to be styled

        Returns: void

    addToChoicesPanel
        Purpose: add all these buttons to the choices panel

        Parameters: ButtonGroup teacherStudentGroup, JRadioButton teacherButton,
        JRadioButton studentButton, JPanel choicesPane. These are all the panels and
        buttons required. There is a better way to do this with fewer parameters, which
        I did in later classes, but this way I got exposed to other ways of doing the 
        same solution.

        Returns: void

    backNextButton
        Purpose: creates panel with back and next buttons.

        Parameters: nothing

        Returns: void

    doBackButtonProcedure
        Purpose: performs action for when back button is clicked

        Parameters: nothing

        Returns: void

    doNextButtonProcedure
        Purpose: performs action for if the next button is clicked

        Parameters: nothing

        Returns: void

    goToStudentClasses
        Purpose: directions for if the user needs to open student classes

        Parameters: String filePath (where to make directory for user)

        Returns: void

    writeUsername
        Purpose: writes username to text file listing users. Necessary when checking if a user
        exists.

        Parameters: nothing

        Returns: void

    checkIfExisting
        Purpose: checks if a user is existing

        Parameters: String of filePath to read from, and a String of the username

        Returns: void

    readNames
        Purpose: create new reader and give information to readLine function to determine if this
        is a new user

        Parameters: a String of the filePath and username, along with a Boolean of if the username is taken

        Returns: a boolean based on if the username is taken

    readLine
        Purpose: loop through usernames to if it is taken.

        Parameters: BufferedReader reader, a string of the username, and a boolean for if the username
        is taken

        Returns: a boolean that depends on if the username is taken. This is based up to the functions that
        call it

    writeNewName
        Purpose: write name if user is new

        Parameters: filePath to run (String), and a String of the username

        Returns: void

    setButtonSelected
        Purpose: if user has been to this window before during this, make previous
        selection again

        Parameters: String filePath to write to, and string of username

        Returns: void

    show
        Purpose: set window to visible

        Parameters: nothing

        Returns: void

    EnterAction- contains a timer to prevent thread issue, along with typical next button
    shortcut.

_____________________________________

NewUser.java

    newUserSetup:
        Purpose: Has functions that need to be run to start up the New User window

        Parameters: nothing

        Returns: void

    instructionsWordsWindow:
        Purpose: Sets up instructions screen

        Parameters: nothing

        Returns: void

    radioButtonSetUp:
        Purpose: make radio buttons, put them in panels, and add to window

        Parameters: nothing

        Returns: void

    existingButton
        Purpose: make existing button and its action listener

        Parameters: nothing

        Returns: void

    newUserButton
        Purpose: make new user button and its action listener

        Parameters: nothing

        Returns: void

    checkIfExistingChangedWithUsername
        Purpose: check if the user changed the new user or existing buttons.

        Parameters: nothing

        Returns: void

    choicesButtonDecorate
        Purpose: decorate the radiobuttons

        Parameters: button to be decorated

        Returns: void

    addToChoicesPanel
        Purpose: add buttons to choices panel

        Parameters: ButtonGroup teacherStudentGroup, JRadioButton existingButton, JRadioButton newUserButton, JPanel choicesPanel.
        Too many parameters, but this function was made before I learned better practices, but
        I did get exposed to different ways of doing the same thing. Buttons from this class are added to panel.

        Returns: void

    buttonSetUp
        Purpose: make buttons, add to backButtonPanel, with their respective action listeners

        Parameters: nothing

        Returns: void

    doNextButtonProcedure
        Purpose: action for if user hits next button

        Parameters: nothing

        Returns: void

    setButtonSelected
        Purpose: when going backward to this class, load what was selected

        Parameters: nothing

        Returns: void

    showWindow
        Purpose: display the window

        Parameters: nothing

        Returns: void

    addNewUserActionListener
        Purpose: new user action listener

        Parameters: nothing

        Returns: void

    addExistingUserActionListener
        Purpose: action listener for existing user

        Parameters: nothing

        Returns: void

    nextButtonActionListenerWithPriorities
        Purpose: add action priorities in CompositeActionListenerWithPriorities class

        Parameters: String keyCause (ex. next button)

        Returns: void

_____________________________________
PrintStudentGrades.java

    printStudentGradesLaunch
        Purpose: to be able to launch print student grades from other classes
        without creating a new instance

        Parameters: nothing

        Returns: void

    addEverythingToWindow
        Purpose: to add components to the GUI

        Parameters: float total (final grade for class)

        Returns: void

    getGradeTotal
        Purpose: to allow other functions to get final grade total

        Parameters: nothing

        Returns: float (the final grade total)

    makeAmountOfFinalGradeList
        Purpose: makes list calculating (average*percentage of grade)/100

        Parameters: nothing

        Returns: void

    makeListOfAveragesList
        Purpose: makes list of averages for each grade type

        Parameters: nothing

        Returns: void

    makeGradeTypeList
        Purpose: make list of grade type names

        Parameters: nothing

        Returns: void

    makePercentageOfGradeList
        Purpose: make a list with percentages of grades

        Parameters: nothing

        Returns: void

    setTitle
        Purpose: sets title of window

        Parameters: nothing

        Returns: void

    buttonSetUpAction
        Purpose: create buttons with respective actions

        Parameters: nothing

        Returns: void

    doBackButtonProcedure
        Purpose: do back button actions

        Parameters: nothing

        Returns: void

    checkForNextButtonProcedure
        Purpose: checks if in final class, if so, disable next button. Otherwise, user is
        permitted to go to the next class

        Parameters: nothing

        Returns: void

    doNextButtonProcedure
        Purpose: go to next class

        Parameters: nothing

        Returns: void

    hideWindow
        Purpose: hide and remove unecessary components

        Parameters: nothing

        Returns: void

_____________________________________

Set.java

    A static class that sets miscellaneous variables concerning the save button, and current window
    getCurrentWindowClosing so that the save button can be accessed and removed by being set to null,
    among other functions. Testing functions would need to be removed if it were
    to be public.

    getInstance, setWindow, getWindow, setNewOrExistingChanged, getNewOrExistingChanged,
    setFilePath, getFilePath, setDEBUGBOX, getDEBUGBOX,
    setCurrentSaveButton, getCurrentSaveButton, TESTRESETSET,
    removeSave, setCurrentWindowClosing,
    getCurrentWindowClosing- custom window closing function if it needs
    to be removed in another class
    ,setCurrentSaveButtonToNull

_____________________________________
SetList.java

    A static class for setting and requesting lists.
    package model;

    getInstance, setClassList, getClassList,
    removeClassFromClassList, getCurrentPanelList,
    setFinalClassList, getFinalClassList, setClassLabelPanel,
    setReadClassLabelPanel, getReadClassLabelPanel, getClassLabelPanel,
    addGradeTypeList, setGradeTypeList, getGradeTypeList,
    removeStudentStatCollectSettings,removeStudentStatCollectReadClassLabelPanel
_____________________________________

SetListeners.java

    A static class for setting and requesting listeners.
    getInstance, setDialogFocusListener, getDialogFocusListener, setYesFocusListener
    getYesFocusListener, setNoFocusListener, getNoFocusListener

_____________________________________
SetState.java

    A static class for setting and requesting information about the state of the application.

    getInstance, getTypeList, setSaveable, getSaveable, setTextFieldPanel, getTextFieldPanel,
    addTextFieldPanel, getEmptiedState, setEmptiedState, getLoadedState,
    setLoadedState, incrementClassListIndex, decrementClassListIndex,
    TESTFORCESETCLASSLISTINDEX, getClassListIndex, setCurrentClass,
    getCurrentClass, setCanContinue, getCanContinue, setTextFieldFont,
    getTextFieldFont, TESTRESETSTATE, setStudentStatCollect, getStudentStatCollect,
    setAreYouSureMessageCause, getAreYouSureMessageCause

_____________________________________

SETTEST.java

    WOULD NOT BELONG IN A PUBLIC VERSION, AS IT COULD BE USED BY BAD ACTORS.
    ALL FUNCTIONS AND CALLING OF THESE FUNCTIONS WOULD BE REMOVED

    For testing purposes, has set and get functions to retrieve variables in ways that cannot happen
    without a user using the GUI.

_____________________________________

SetUserInformation.java

    A static class for setting and requesting information about the user.

    getInstance, setUsername, getUsername, getPathToUsernameFolder,
    getPathToClassInformationFolder, getPathToClassTextFile,
    getPathToClassInformationFileWithTextField,
    getPathToClassInformationFileWithIndex,
    getPathToClassInformationFileWithChosenIndex, setExistingOrNew,
    getExistingOrNew, setStudentOrTeacher,getStudentOrTeacher, addDeleteToQueue,
    getDeleteQueue, TESTRESETSETUSERINFORMATION

_____________________________________
StudentClasses.java

    studentClassesLaunch
        Purpose: To launch the student classes window without making a new instance

        Parameters: nothing

        Returns: void

    loadIfNeeded
        Purpose: to check if the class that is supposed to be in this window, already
        has information associated with it

        Parameters: nothing

        Returns: void

    westPanelCreate
        Purpose: create panel with newClass and DeleteClass buttons

        Parameters: nothing

        Returns: void

    buttonSetUpAction
        Purpose: make back, save, and next buttons with their respective panels

        Parameters: nothing

        Returns: void

    makeBackButtonPanel
        Purpose: make back button with its action listener, and put it in a panel

        Parameters: nothing

        Returns: void

    makeSaveButtonPanel
        Purpose: make save button with its action listener, and put it in a panel

        Parameters: nothing

        Returns: void

    saveButtonAction
        Purpose: save information to their respective files

        Parameters: nothing

        Returns: void

    makeNextButtonPanel
        Purpose: make next button with its action listener, and put it in a panel

        Parameters: nothing

        Returns: void

    doNextButtonProcedure
        Purpose: go to next class or make a PrintStudentGrades instance

        Parameters: nothing

        Returns: void

    createNewClassButton
        Purpose: create the "New Class" button, and add its action listener

        Parameters: nothing

        Returns: void

    deleteClassButton
        Purpose: create the "Delete Class Mode" button, and add its action listener

        Parameters: nothing

        Returns: void

    writeType
        Purpose: call necessary functions to write the GUI information to its appropriate
        files

        Parameters: nothing

        Returns: void

    backToDefaultDeleteButton
        Purpose: make necessary handling changes when user clicks "Leave Delete Mode"

        Parameters: nothing

        Returns: void

    deleteMode
        Purpose: call necessary functions to enter delete mode

        Parameters: nothing

        Returns: void

    instructionsWordsAndPanel
        Purpose: setup the instructions panel and style it

        Parameters: String text to be displayed onto GUI

        Returns: void

    prepareTextboxForDeleteMode
        Purpose: add appropriate listeners to all textboxes if delete mode is entered

        Parameters: nothing

        Returns: void

    addMouseListenerToTextboxAndFrame
        Purpose: logic for if a textbox is clicked when in delete mode, and calls
        necessary function for the frame

        Parameters: JTexField textfield to add the listener to

        Returns: void

    turnOffEditability
        Purpose: make textboxes uneditable. Helpful for entering delete mode

        Parameters: textbox to make un-editable.

        Returns: void

    deleteQuestionButtonAndAction
        Purpose: setup necessary changes for when a textbox is clicked in delete mode

        Parameters: nothing

        Returns: void

    pickAppropriateInstructionWordsAndPanels
        Purpose: based on circumstances, determine what instruction words should be after delete class popup

        Parameters: String yesOrNO, for if user did click "yes" to delete the textbox,
        or no.

        Returns: void

    removeDeleteClassButtonActionListeners
        Purpose: remove all action listeners on the deleteClassButton, necessary
        for when going into another mode

        Parameters: nothing

        Returns: void

    leaveDeleteModeButton
        Purpose: making appropriate changes to the "Delete Mode" button when entered

        Parameters: nothing

        Returns: void

    windowMouseListener
        Purpose: add default mouse listener, when not in delete mode

        Parameters: nothing

        Returns: void

    hideWindow
        Purpose: hide unecessary components when going to a different GUI screen

        Parameters: nothing

        Returns: void

    removeFromWindow
        Purpose: remove uncessary functions from window

        Parameters: nothing

        Returns: void

    TESTDELETECLASSBUTTON, TESTSAVEBUTTON, TESTNEXTBUTTON, TESTNEWCLASSBUTTON, TESTWRITETYPE
        THESE FUNCTIONS ARE FOR TESTING PURPOSES ONLY, AND WOULD NEED TO BE REMOVED
        IF THE PROJECT WAS TO EVER GO PUBLIC (FOR SECURITY REASONS).

_____________________________________
StudentStatCollect.java
    studentStatCollectLaunch
        Purpose: to be able to launch student stat collect without creating another instance,
        useful to reuse the instance for future user classes.

        Parameters: nothing

        Returns: void

    buttonSetUpAction
        Purpose: make buttons menu and attach their actions

        Parameters: nothing

        Returns: void

    backAction
        Purpose: add action listener for back button

        Parameters: JButton backButton

        Returns: void

    decideBackActionBasedOnClass
        Purpose: based on class indexes, decide which classes the GUI needs

        Parameters: nothing

        Returns: void

    backAction2
        Purpose: basically the same as regular backAction function, but is used is the user uses
        "Remove placeholders to continue?"> yes.
        If it used the regular backaction, it would cause an infinite loop

        Parameters: nothing

        Returns: void

    goToPreviousClasses
        Purpose: save and go to earlier classes

        Parameters: nothing

        Returns: void

    addLoadedBoxes
        Purpose: check for files to load, and load information to GUI

        Parameters: nothing

        Returns: void

    saveAction
        Purpose: add action listener for save button

        Parameters: JButton saveButton

        Returns: void

    saveButtonAction
        Purpose: saves information

        Parameters: String actionCause (if the action was caused by going to other classes
        or clicking the save button)

        Returns: void

    nextButtonAction
        Purpose: add action listener to next button

        Parameters: JButton nextButton

        Returns: void

    doNextButtonProcedure
        Purpose: save and perform input sanitization

        Parameters: nothing

        Returns: void

    ifCreditsIsJPanel
        Purpose: if in doNextButtonProcedure function it determines it is a JPanel,
        it leads here and performs input sanitization

        Parameters: nothing

        Returns: void

    checkPercentageOfGradesFormat
        Purpose: checks if percentage of grades boxes is in a proper format

        Parameters: nothing

        Returns: void

    checkCreditsFormat
        Purpose: checks if credits boxes is in a proper format

        Parameters: String text

        Returns: Boolean, based on if boxes are in an acceptable format

    checkGradesFormat
        Purpose: checks if grades boxes is in a proper format

        Parameters: String text

        Returns:  Boolean, based on if boxes are in an acceptable format

    makeFormatReminderDialog
        Purpose: make a pop up if the format is invalid

        Parameters: nothing

        Returns: void

    allPassedGoToStudentStats
        Purpose: what to do if all format checking is acceptable

        Parameters: nothing

        Returns: void

    goToPrintStudentGrades
        Purpose: create and set up new instance of printgrades screen

        Parameters: nothing

        Returns: void

    doNextButtonProcedure2
        Purpose: for if user uses "remove placeholders to continue"

        Parameters: nothing

        Returns: void

    visitNextStudentClass
        Purpose: what to do if going to next student class

        Parameters: nothing

        Returns: void

    boxStarterPack
        Purpose: add credits boxes and type name, percentage of grade, grades

        Parameters: nothing

        Returns: void

    createNewTypeButton
        Purpose: create the new type button

        Parameters: nothing

        Returns: void

    newSetButtonAction
        Purpose: action if new set button is clicked

        Parameters: nothing

        Returns: void

    deleteButtonPanel
        Purpose: make panel with delete button

        Parameters: nothing

        Returns: JPanel with delete button

    correctBoxFormatChecker
        Purpose: actual logic for checking format of percentages

        Parameters: pattern (proper percentage format), index of where
        percentage box is in panel, String calledFrom (for percentage of grade,
        but could add more logic if more was added)

        Returns: Boolean with whether the pattern is okay

    DisplayClasses
        Purpose: read text from textboxes and give to read class funciton

        Parameters: nothing

        Returns: void

    readClass
        Purpose: add class label panel to window

        Parameters: typeList (String of arrays)

        Returns: void

    hideWindow
        Purpose: hides components

        Parameters: nothing

        Returns: void

    boxManageCreate
        Purpose: create a box

        Parameters: String placeholder, String type (type to
        be created), Boolean boxLoaded (if the box
        is loaded)

        Returns: void

    newSet
        Purpose: create grade type, percentage of grade, grades

        Parameters: nothing

        Returns: void

    removeVariablesInWindow
        Purpose: remove variables from window

        Parameters: nothing

        Returns: void

    TESTNEXTBUTTON, TESTNEWTYPEBUTTON, TESTBACKBUTTON
        testing buttons that would need to be deleted if made public for
        security reasons.

_____________________________________

TESTFUNCTSFOREASYTESTING
    WOULD NOT BELONG IN A PUBLIC VERSION, AS IT COULD BE USED BY BAD ACTORS.
    ALL FUNCTIONS AND CALLING OF THESE FUNCTIONS WOULD BE REMOVED

    provides functions that a developer can reference for testcases, ex. a function that
    gives all necessary information to get to the "StudentStatCollect" screen as a
    signed-in existing user named "TESTHELLO".

_____________________________________

TextFieldColorFocusListener.java

    focusGained
        Purpose: Decide what text is and emptied state is upon clicks

        Parameters: Focus event e

        Returns: void

    focusLost
        Purpose: Decide what text is and emptied state is upon clicks (like the placeholder if box is
        empty), and caret position

        Parameters: Focus event e

        Returns: void

    makeLoseFocus
        Purpose: forces textboxes to lose focus and chooses appropriate text color,
        and caret position.

        Parameters: placeholder (default text in textbox)

        Returns: void

_____________________________________